openapi: 3.0.3

info:
  title: Mock EPL Server
  description: "This is the API server documentation for our mock EPL API."
  contact:
    email: barry.jonathanks@gmail.com
  version: 0.0.1

externalDocs:
  description: Find out more about this API
  url: https://github.com/random-guys/backend-developer-test

servers:
  - url: ""
  - url: http://localhost:{port}
    description: Local development server
    variables:
      port:
        default: "8080"
        description: The service port at which the API listens
tags:
  - name: admin-accounts
    description: Everything about managing admin accounts.
    externalDocs:
      description: Find out more
      url: https://github.com/random-guys/backend-developer-test#user-types

  - name: user-accounts
    description: Everything about user accounts.
    externalDocs:
      description: Find out more
      url: https://github.com/random-guys/backend-developer-test#user-types

  - name: user-accounts
    description: Everything about managing user accounts.
    externalDocs:
      description: Find out more
      url: https://github.com/random-guys/backend-developer-test#user-types

  - name: teams
    description: Everything about managing teams.
    externalDocs:
      description: Find out more
      url: https://github.com/random-guys/backend-developer-test#user-types

  - name: fixtures
    description: Everything about fixtures.
    externalDocs:
      description: Find out more
      url: https://github.com/random-guys/backend-developer-test#user-types

paths:
  /login/admins/:
    post:
      description: Log in as an admin.
      operationId: admin_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        200:
          $ref: "#/components/responses/login_response"
        400:
          $ref: "#/components/responses/bad_request"
      security:
        - bearer: []
      summary: Admin login
      tags:
        - admin-accounts

  /login/users/:
    post:
      description: Log in as a user.
      operationId: user_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        200:
          $ref: "#/components/responses/login_response"
        400:
          $ref: "#/components/responses/bad_request"
      security:
        - bearer: []
      summary: User login
      tags:
        - user-accounts

  /signup/admins/:
    post:
      description: Add another admin to the system. This is restricted to admins.
      operationId: admin_signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupDto"
      responses:
        201:
          description: Admin account created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/_DataResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/Administrator"
        400:
          $ref: "#/components/responses/bad_request"
        401:
          $ref: "#/components/responses/unauthorized"
        409:
          $ref: "#/components/responses/conflict"
        422:
          $ref: "#/components/responses/unprocessible_entity"
      security:
        - bearer: []
      summary: Create a new admin account (admins only)
      tags:
        - admin-accounts

  /signup/users/:
    post:
      description: Sign up as a user
      operationId: user_signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupDto"
      responses:
        201:
          description: User account created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/_DataResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/bad_request"
        409:
          $ref: "#/components/responses/conflict"
        422:
          $ref: "#/components/responses/unprocessible_entity"
      security:
        - bearer: []
      summary: Create a new user account
      tags:
        - user-accounts

  /teams/:
    post:
      operationId: create_team
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamInfo"
      responses:
        201:
          $ref: "#/components/responses/team"
        400:
          $ref: "#/components/responses/bad_request"
        401:
          $ref: "#/components/responses/unauthorized"
        422:
          $ref: "#/components/responses/unprocessible_entity"
      security:
        - bearer: []
      summary: Add a new team (admins only)
      tags:
        - teams

    get:
      operationId: list_teams
      responses:
        200:
          $ref: "#/components/responses/team_list"
        401:
          $ref: "#/components/responses/unauthorized"
      security:
        - bearer: []
      summary: List available teams (requires authentication)
      tags:
        - teams

  /teams/{team_id}:
    parameters:
      - name: team_id
        in: path
        schema:
          type: string
        required: true

    get:
      operationId: view_team
      responses:
        200:
          $ref: "#/components/responses/team"
        401:
          $ref: "#/components/responses/unauthorized"
      security:
        - bearer: []
      summary: View team info (admins only)
      tags:
        - teams

    delete:
      operationId: remove_team
      responses:
        200:
          description: Team removed.
        401:
          $ref: "#/components/responses/unauthorized"
      security:
        - bearer: []
      summary: Remove team (admins only)
      tags:
        - teams

    patch:
      description: Update team info (admins only)
      operationId: update_team
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamInfo"
      responses:
        200:
          $ref: "#/components/responses/team"
        400:
          $ref: "#/components/responses/bad_request"
        401:
          $ref: "#/components/responses/unauthorized"
        422:
          $ref: "#/components/responses/unprocessible_entity"
      security:
        - bearer: []
      summary: Update team info (admins only)
      tags:
        - teams

  /fixtures/:
    post:
      operationId: create_fixture
      requestBody:
        $ref: "#/components/requestBodies/fixture_info"
      responses:
        201:
          $ref: "#/components/responses/fixture"
        400:
          $ref: "#/components/responses/bad_request"
        401:
          $ref: "#/components/responses/unauthorized"
        422:
          $ref: "#/components/responses/unprocessible_entity"
      security:
        - bearer: []
      summary: Add a new fixture (admins only)
      tags:
        - fixtures

    get:
      parameters:
        - name: status
          in: query
          schema:
            enum:
              - completed
              - pending
      operationId: list_fixtures
      responses:
        200:
          $ref: "#/components/responses/fixtures_list"
        401:
          $ref: "#/components/responses/unauthorized"
      security:
        - bearer: []
      summary: List available fixtures (requires authentication)
      tags:
        - fixtures

  /fixtures/{fixture_id}:
    parameters:
      - name: fixture_id
        in: path
        schema:
          type: string
        required: true

    delete:
      operationId: remove_fixture
      responses:
        200:
          description: Fixture removed.
        401:
          $ref: "#/components/responses/unauthorized"
      security:
        - bearer: []
      summary: Remove fixture (admins only)
      tags:
        - fixtures

    patch:
      description: Update fixture info (restricted to admins)
      operationId: update_fixture
      requestBody:
        $ref: "#/components/requestBodies/fixture_info"
      responses:
        200:
          $ref: "#/components/responses/fixture"
        400:
          $ref: "#/components/responses/bad_request"
        401:
          $ref: "#/components/responses/unauthorized"
        422:
          $ref: "#/components/responses/unprocessible_entity"
      security:
        - bearer: []
      summary: Update fixture info (admins only)
      tags:
        - fixtures

components:
  requestBodies:
    fixture_info:
      content:
        application/json:
          schema:
            properties:
              home_team:
                description: The ID of the home team
                type: string
              away_team:
                description: The ID of the away team
                type: string
              match_date:
                description: The date of the match
                type: string
                format: date-time
      required: true

  schemas:
    BasicUserInfo:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 100
        last_name:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
      required:
        - first_name
        - last_name
        - email

    SignupDto:
      description: Information required for sign up.
      allOf:
        - $ref: "#/components/schemas/BasicUserInfo"
        - properties:
            password:
              type: string
          required:
            - password

    LoginDto:
      description: Login credentials.
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - password

    Administrator:
      description: A user with privileged access.
      allOf:
        - $ref: "#/components/schemas/_Entity"
        - $ref: "#/components/schemas/BasicUserInfo"

    User:
      description: A user with regular access.
      allOf:
        - $ref: "#/components/schemas/_Entity"
        - $ref: "#/components/schemas/BasicUserInfo"

    TeamInfo:
      properties:
        home_stadium:
          type: string
        logo_url:
          type: string
        name:
          type: string
        short_name:
          type: string
      required:
        - home_stadium
        - logo_url
        - name
        - short_name

    Team:
      description: A competitor in the EPL league.
      allOf:
        - $ref: "#/components/schemas/_Entity"
        - $ref: "#/components/schemas/TeamInfo"

    Fixture:
      description: A match arrangement between teams.
      allOf:
        - $ref: "#/components/schemas/_Entity"
        - properties:
            home_team:
              $ref: "#/components/schemas/Team"
            away_team:
              $ref: "#/components/schemas/Team"
            match_date:
              type: string
              format: date-time

    _DataResponse:
      description: An API response containing data.
      properties:
        "@type":
          type: string
          description: The resource type returned.
        message:
          type: string
          description: Information about the response.
        data: {}

      required:
        - "@type"
        - data

    _Entity:
      description: Default fields for stable entities.
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - id

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

    ValidationError:
      type: object
      allOf:
        - $ref: "#/components/schemas/Error"
        - properties:
            details:
              type: array
              items:
                type: object
                properties:
                  message:
                    type: string
                  target:
                    type: string
                required:
                  - message
                  - target

  responses:
    team:
      description: Team information
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/_DataResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/Team"
                  "@type":
                    enum:
                      - "Team"

    team_list:
      description: Teams list
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/_DataResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
                  "@type":
                    enum:
                      - "Teams"
    fixture:
      description: Fixture information
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/_DataResponse"
              - properties:
                  data:
                    $ref: "#/components/schemas/Fixture"
                  "@type":
                    enum:
                      - "Fixture"

    fixtures_list:
      description: Fixtures list
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/_DataResponse"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Fixture"
                  "@type":
                    enum:
                      - "Fixtures"

    login_response:
      description: Login successful.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/_DataResponse"
              - properties:
                  data:
                    properties:
                      token:
                        type: string

    forbidden:
      description: Insufficient privileges to carry out action.
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/Error"
              - properties:
                  code:
                    enum:
                      - auth/restricted-action
    bad_request:
      description: Request malformed.
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/Error"

    conflict:
      description: |
        Resource conflicts with current state on the server. For example,
        you tried to create an account with an email that already exists.
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/Error"

    unauthorized:
      description: Authentication information provided is incorrect.
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/Error"
              - properties:
                  code:
                    enum:
                      - auth/unauthorized

    unprocessible_entity:
      description: The request failed vaildation.
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/ValidationError"

  securitySchemes:
    api_key:
      type: apiKey
      name: bearer
      in: header
